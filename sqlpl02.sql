-- CURSOR : 실행 결과를 순서대로 기억하고 있는 포인터
-- 커서의 종류 : 암묵적 커서, 명시적 커서

-- 암묵적 키워드 : 커서를 선언하지 않아도 됨     단순한 작업을 할 때(EX.처리건수)
-- SQL%NOTFOUND : 결과(포인터)가 더 이상 없으면 TRUE
-- SQL%FOUND : 결과(포인터)가 있으면 TRUE
-- SQL%ROWCOUNT : 반환된 레코드 건수
-- SQL%ISOPEN : 해당 커서가 열려 있으면 TRUE

-- 명시적 키워드 : 반드시 커서를 선언해야함  
-- %NOTFOUND : 결과(포인터)가 더 이상 없으면 TRUE
-- %FOUND : 결과(포인터)가 있으면 TRUE
-- %ROWCOUNT : 반환된 레코드 건수
-- %ISOPEN : 해당 커서가 열려 있으면 TRUE

-- OPEN : 커서 열기
-- FETCH : ㅋ서 ㅓ읽어 오기
-- CLOSE : 커서 닫기

SET SERVEROUTPUT ON;


DECLARE -- 커서를 선언하지 않았음 >> 암묵적

BEGIN
    DELETE FROM MEMBER WHERE ID LIKE 'k';
    DBMS_OUTPUT.PUT_LINE('처리건수 : ' || SQL%ROWCOUNT);
END;
/


DECLARE
    CURSOR MEM_CUR 
    IS SELECT * FROM MEMBER;
    MEM_C MEMBER%ROWTYPE;   -- 튜플 변수 선언
BEGIN
    OPEN MEM_CUR;
    LOOP
        FETCH MEM_C INTO MEM_CUR;
        EXIT WHEN MEM_CUR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(MEM_C.ID || ',' || MEM_CUR.NAME);
    END LOOP;
    CLOSE MEM_CUR;
END;
/



CREATE TABLE TESTA(ID VARCHAR2(20), NAME VARCHAR2(40));
CREATE TABLE TESTB(IID VARCHAR2(20), NNAME VARCHAR2(40), POINT NUMBER);

INSERT INTO TESTA VALUES('AAA','에이에이에이');
INSERT INTO TESTA VALUES('BBB','비비비');
INSERT INTO TESTA VALUES('CCC','씨씨씨');

INSERT INTO TESTB VALUES('AAA','에이에이에이',10);
INSERT INTO TESTB VALUES('BBB','비비비',10);
INSERT INTO TESTB VALUES('DDD','디디디',10);
INSERT INTO TESTB VALUES('EEE','이이이',50);

SELECT * FROM TESTA, TESTB;

CREATE VIEW TEST_UNION_VIEW AS SELECT ID,NAME FROM TESTA UNION SELECT IID,NNAME FROM TESTB;
CREATE VIEW TEST_INTERSECT_VIEW AS SELECT ID,NAME FROM TESTA INTERSECT SELECT IID,NNAME,POINT FROM TESTB;
CREATE VIEW TEST_MINUS_VIEW AS SELECT ID,NAME FROM TESTA MINUS SELECT IID,NNAME FROM TESTB;

CREATE TABLE PPRODUCT(
PID VARCHAR2(10) PRIMARY KEY, 
PNAME VARCHAR2(10) NOT NULL,
PPRICE VARCHAR2(10) NOT NULL);



CREATE TABLE SSALES(
SNO NUMBER(10) PRIMARY KEY,
MID VARCHAR2(20) NOT NULL,
PID VARCHAR2(10) NOT NULL,
AMOUNT NUMBER NOT NULL);


INSERT INTO PPRODUCT VALUES('01', '키보드', '30000');
INSERT INTO PPRODUCT VALUES('02', '마우스', '15000');

CREATE SEQUENCE SALES_SEQ;



INSERT INTO SSALES VALUES(SALES_SEQ.NEXTVAL, 'AAA', '01', 2);
INSERT INTO SSALES VALUES(SALES_SEQ.NEXTVAL, 'BBB', '02', 3);

COMMIT;

SELECT * FROM SSALES;


SELECT A.MID, B.PID FROM SSALES A INNER JOIN TESTA B ON A.MID=B.ID;













select * from member;
